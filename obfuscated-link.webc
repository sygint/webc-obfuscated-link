<script webc:type="js" webc:is="template" webc:root="override">
  (() => {
    function base64(text) {
      return bytesToBase64(new TextEncoder().encode(text));
    }

    function base64(text) {
      const bytes = new TextEncoder().encode(text);
      const binString = Array.from(bytes, (byte) =>
        String.fromCodePoint(byte)
      ).join("");
      return btoa(binString);
    }

    const encode = (text) =>
      text.replace(/[\u0000-\u9999<>\&]/g, (i) => "&#" + i.charCodeAt(0) + ";");

    const { phone, email } = this;

    const scheme = phone ? "tel" : "mailto";
    const value = phone ?? email;
    const valueType = phone ? "phone" : "email";
    const obfuscatedValue = base64(`${scheme}:${value}`);
    const encodedText = encode(`[${valueType} protected]`, {
      encodeEverything: true,
    });

    // This should be able to output HTML entities, but I can't seem to get it to work

    return `<a webc:raw data-obfuscated-href="${obfuscatedValue}">${encodedText}</a>`;
  })();
</script>

<script>
  const observerOptions = {
    rootMargin: "0px",
    threshold: 0.5,
  };

  function observerCallback(entries, observer) {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        const element = entry.target;
        const obfuscatedHref = element.getAttribute("data-obfuscated-href");
        const href = atob(obfuscatedHref);
        const text = href.slice(href.indexOf(":") + 1);

        element.href = atob(obfuscatedHref);
        element.removeAttribute("data-obfuscated-href");
        element.textContent = text;
      }
    });
  }

  const observer = new IntersectionObserver(observerCallback, observerOptions);

  document.querySelectorAll("[data-obfuscated-href]").forEach((element) => {
    if (element) {
      observer.observe(element);
    }
  });
</script>

